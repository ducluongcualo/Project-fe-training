{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Container_1 = require(\"../Container\");\nvar Token_1 = require(\"../Token\");\n/**\n * Marks class as a service that can be injected using container.\n */\nfunction Service(optionsOrServiceName, maybeFactory) {\n  if (arguments.length === 2 || optionsOrServiceName instanceof Function) {\n    var serviceId = {\n      service: new Token_1.Token()\n    };\n    var dependencies_1 = arguments.length === 2 ? optionsOrServiceName : [];\n    var factory_1 = arguments.length === 2 ? maybeFactory : optionsOrServiceName;\n    Container_1.Container.set({\n      id: serviceId.service,\n      factory: function (container) {\n        var params = dependencies_1.map(function (dependency) {\n          return container.get(dependency);\n        });\n        return factory_1.apply(void 0, params);\n      }\n    });\n    return serviceId;\n  } else {\n    return function (target) {\n      var service = {\n        type: target\n      };\n      if (typeof optionsOrServiceName === \"string\" || optionsOrServiceName instanceof Token_1.Token) {\n        service.id = optionsOrServiceName;\n        service.multiple = optionsOrServiceName.multiple;\n        service.global = optionsOrServiceName.global || false;\n        service.transient = optionsOrServiceName.transient;\n      } else if (optionsOrServiceName) {\n        // ServiceOptions\n        service.id = optionsOrServiceName.id;\n        service.factory = optionsOrServiceName.factory;\n        service.multiple = optionsOrServiceName.multiple;\n        service.global = optionsOrServiceName.global || false;\n        service.transient = optionsOrServiceName.transient;\n      }\n      Container_1.Container.set(service);\n    };\n  }\n}\nexports.Service = Service;","map":{"version":3,"mappings":";;;;;AAAA;AAEA;AAuEA;;;AAGA,iBAA8CA,oBAA+E,EAAEC,YAAsC;EACjK,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,IAAKH,oBAAoB,YAAYI,QAAS,EAAE;IACtE,IAAMC,SAAS,GAAG;MAAEC,OAAO,EAAE,IAAIC,aAAK;IAAK,CAAE;IAC7C,IAAMC,cAAY,GAAGN,SAAS,CAACC,MAAM,KAAK,CAAC,GAAGH,oBAA6B,GAAG,EAAE;IAChF,IAAMS,SAAO,GAAGP,SAAS,CAACC,MAAM,KAAK,CAAC,GAAGF,YAAY,GAAGD,oBAAgC;IAExFU,qBAAS,CAACC,GAAG,CAAC;MACVC,EAAE,EAAEP,SAAS,CAACC,OAAO;MACrBO,OAAO,EAAE,UAACC,SAA4B;QAClC,IAAMC,MAAM,GAAGP,cAAY,CAACQ,GAAG,CAAC,oBAAU;UAAI,gBAAS,CAACC,GAAG,CAACC,UAAU,CAAC;QAAzB,CAAyB,CAAC;QACxE,OAAOT,SAAO,eAAIM,MAAM;MAC5B;KACH,CAAC;IAEF,OAAOV,SAAS;GAEnB,MAAM;IACH,OAAO,UAASc,MAAgB;MAE5B,IAAMb,OAAO,GAA0B;QACnCc,IAAI,EAAED;OACT;MAED,IAAI,OAAOnB,oBAAoB,KAAK,QAAQ,IAAIA,oBAAoB,YAAYO,aAAK,EAAE;QACnFD,OAAO,CAACM,EAAE,GAAGZ,oBAAoB;QACjCM,OAAO,CAACe,QAAQ,GAAIrB,oBAA6C,CAACqB,QAAQ;QAC1Ef,OAAO,CAACgB,MAAM,GAAItB,oBAA6C,CAACsB,MAAM,IAAI,KAAK;QAC/EhB,OAAO,CAACiB,SAAS,GAAIvB,oBAA6C,CAACuB,SAAS;OAE/E,MAAM,IAAIvB,oBAAoB,EAAE;QAAE;QAC/BM,OAAO,CAACM,EAAE,GAAIZ,oBAA6C,CAACY,EAAE;QAC9DN,OAAO,CAACO,OAAO,GAAIb,oBAA6C,CAACa,OAAO;QACxEP,OAAO,CAACe,QAAQ,GAAIrB,oBAA6C,CAACqB,QAAQ;QAC1Ef,OAAO,CAACgB,MAAM,GAAItB,oBAA6C,CAACsB,MAAM,IAAI,KAAK;QAC/EhB,OAAO,CAACiB,SAAS,GAAIvB,oBAA6C,CAACuB,SAAS;;MAGhFb,qBAAS,CAACC,GAAG,CAACL,OAAO,CAAC;IAC1B,CAAC;;AAET;AAxCAkB","names":["optionsOrServiceName","maybeFactory","arguments","length","Function","serviceId","service","Token_1","dependencies_1","factory_1","Container_1","set","id","factory","container","params","map","get","dependency","target","type","multiple","global","transient","exports"],"sources":["C:\\reactjs\\bnk_fe_training\\base\\src\\decorators\\Service.ts"],"sourcesContent":["import {Container} from \"../Container\";\nimport {ContainerInstance} from \"../ContainerInstance\";\nimport {Token} from \"../Token\";\nimport {ServiceMetadata} from \"../types/ServiceMetadata\";\nimport {ServiceOptions} from \"../types/ServiceOptions\";\n\n\nexport type ObjectType<T1> = { new (...args: any[]): T1 } | { service: T1 };\n\nexport function Service<R>(\n    factory: () => R\n): { service: R };\nexport function Service<R, T1>(\n    dependencies: [ObjectType<T1>],\n    factory: (dependency1: T1) => R\n): { service: R };\nexport function Service<R, T1, T2>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>],\n    factory: (dependency1: T1, dependency2: T2) => R\n): { service: R };\nexport function Service<R, T1, T2, T3>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5, T6>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>, ObjectType<T6>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5, dependency6: T6) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5, T6, T7>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>, ObjectType<T6>, ObjectType<T7>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5, dependency6: T6, dependency7: T7) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5, T6, T7, T8>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>, ObjectType<T6>, ObjectType<T7>, ObjectType<T8>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5, dependency6: T6, dependency7: T7, dependency8: T8) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>, ObjectType<T6>, ObjectType<T7>, ObjectType<T8>, ObjectType<T9>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5, dependency6: T6, dependency7: T7, dependency8: T8, dependency9: T9) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>, ObjectType<T6>, ObjectType<T7>, ObjectType<T8>, ObjectType<T9>, ObjectType<T10>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5, dependency6: T6, dependency7: T7, dependency8: T8, dependency9: T9, dependency10: T10) => R\n): { service: R };\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(): Function;\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(name: string): Function;\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(token: Token<any>): Function;\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service<T, K extends keyof T>(options?: ServiceOptions<T, K>): Function;\n\n/**\n * Marks class as a service that can be injected using container.\n */\nexport function Service<T, K extends keyof T>(optionsOrServiceName?: ServiceOptions<T, K>|Token<any>|string|any[]|(() => any), maybeFactory?: (...args: any[]) => any): any {\n    if (arguments.length === 2 || (optionsOrServiceName instanceof Function)) {\n        const serviceId = { service: new Token<T>() };\n        const dependencies = arguments.length === 2 ? optionsOrServiceName as any[] : [];\n        const factory = arguments.length === 2 ? maybeFactory : optionsOrServiceName as Function;\n\n        Container.set({\n            id: serviceId.service,\n            factory: (container: ContainerInstance) => {\n                const params = dependencies.map(dependency => container.get(dependency));\n                return factory(...params);\n            }\n        });\n\n        return serviceId;\n\n    } else {\n        return function(target: Function) {\n\n            const service: ServiceMetadata<T, K> = {\n                type: target\n            };\n\n            if (typeof optionsOrServiceName === \"string\" || optionsOrServiceName instanceof Token) {\n                service.id = optionsOrServiceName;\n                service.multiple = (optionsOrServiceName as ServiceOptions<T, K>).multiple;\n                service.global = (optionsOrServiceName as ServiceOptions<T, K>).global || false;\n                service.transient = (optionsOrServiceName as ServiceOptions<T, K>).transient;\n\n            } else if (optionsOrServiceName) { // ServiceOptions\n                service.id = (optionsOrServiceName as ServiceOptions<T, K>).id;\n                service.factory = (optionsOrServiceName as ServiceOptions<T, K>).factory;\n                service.multiple = (optionsOrServiceName as ServiceOptions<T, K>).multiple;\n                service.global = (optionsOrServiceName as ServiceOptions<T, K>).global || false;\n                service.transient = (optionsOrServiceName as ServiceOptions<T, K>).transient;\n            }\n\n            Container.set(service);\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}