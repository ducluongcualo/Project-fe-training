{"ast":null,"code":"import { LoginDTO, LoginResponse } from \"../shared/dto/login.dto\";\nimport { SystemCode } from \"../shared/business/system-code\";\nexport const mockData = [{\n  url: LoginDTO.url,\n  handler: request => {\n    const body = request.body;\n    if (body.email === \"admin@bnksolution.com\" && body.password === \"asdf@1234\") {\n      return {\n        code: SystemCode.SUCCESS,\n        msg: \"\",\n        data: new LoginResponse(\"testToken\")\n      };\n    }\n    throw new Error(\"Login failed\");\n  }\n}];","map":{"version":3,"names":["LoginDTO","LoginResponse","SystemCode","mockData","url","handler","request","body","email","password","code","SUCCESS","msg","data","Error"],"sources":["C:/reactjs/bnk_fe_training/base/src/services/mock.ts"],"sourcesContent":["import { LoginBody, LoginDTO, LoginResponse } from \"../shared/dto/login.dto\";\r\nimport { DTO } from \"../shared/dto/base.dto\";\r\nimport { ResponseDTO } from \"../shared/dto/base.dto\";\r\nimport { SystemCode } from \"../shared/business/system-code\";\r\n\r\ninterface IMockData {\r\n\turl: string;\r\n\thandler: (request: DTO) => ResponseDTO<unknown>;\r\n}\r\n\r\nexport const mockData: Array<IMockData> = [\r\n\t{\r\n\t\turl: LoginDTO.url,\r\n\t\thandler: request => {\r\n\t\t\tconst body = request.body as LoginBody;\r\n\t\t\tif (body.email === \"admin@bnksolution.com\" && body.password === \"asdf@1234\") {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcode: SystemCode.SUCCESS,\r\n\t\t\t\t\tmsg: \"\",\r\n\t\t\t\t\tdata: new LoginResponse(\"testToken\"),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tthrow new Error(\"Login failed\");\r\n\t\t},\r\n\t},\r\n];\r\n"],"mappings":"AAAA,SAAoBA,QAAQ,EAAEC,aAAa,QAAQ,yBAAyB;AAG5E,SAASC,UAAU,QAAQ,gCAAgC;AAO3D,OAAO,MAAMC,QAA0B,GAAG,CACzC;EACCC,GAAG,EAAEJ,QAAQ,CAACI,GAAG;EACjBC,OAAO,EAAEC,OAAO,IAAI;IACnB,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAAiB;IACtC,IAAIA,IAAI,CAACC,KAAK,KAAK,uBAAuB,IAAID,IAAI,CAACE,QAAQ,KAAK,WAAW,EAAE;MAC5E,OAAO;QACNC,IAAI,EAAER,UAAU,CAACS,OAAO;QACxBC,GAAG,EAAE,EAAE;QACPC,IAAI,EAAE,IAAIZ,aAAa,CAAC,WAAW;MACpC,CAAC;IACF;IACA,MAAM,IAAIa,KAAK,CAAC,cAAc,CAAC;EAChC;AACD,CAAC,CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}