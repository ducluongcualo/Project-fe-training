{"ast":null,"code":"import { LoginDTO, LoginResponse } from '../shared/dto/login.dto';\nimport { SystemCode } from '../shared/business/system-code';\nexport const mockData = [{\n  url: LoginDTO.url,\n  handler: request => {\n    const body = request.body;\n    if (body.email === 'admin@bnksolution.com' && body.password === 'asdf@1234') {\n      return {\n        code: SystemCode.SUCCESS,\n        msg: '',\n        data: new LoginResponse('testToken')\n      };\n    }\n    throw new Error('Login failed');\n  }\n}];","map":{"version":3,"names":["LoginDTO","LoginResponse","SystemCode","mockData","url","handler","request","body","email","password","code","SUCCESS","msg","data","Error"],"sources":["C:/reactjs/bnk_fe_training/base/src/services/mock.ts"],"sourcesContent":["import { LoginBody, LoginDTO, LoginResponse } from '../shared/dto/login.dto';\nimport { DTO } from '../shared/dto/base.dto';\nimport { ResponseDTO } from '../shared/dto/base.dto';\nimport { SystemCode } from '../shared/business/system-code';\n\ninterface IMockData {\n    url: string;\n    handler: (request: DTO) => ResponseDTO<unknown>;\n}\n\nexport const mockData: Array<IMockData> = [\n    {\n        url: LoginDTO.url,\n        handler: (request) => {\n            const body = request.body as LoginBody;\n            if (body.email === 'admin@bnksolution.com' && body.password === 'asdf@1234') {\n                return {\n                    code: SystemCode.SUCCESS,\n                    msg: '',\n                    data: new LoginResponse('testToken'),\n                };\n            }\n            throw new Error('Login failed');\n        },\n    },\n];\n"],"mappings":"AAAA,SAAoBA,QAAQ,EAAEC,aAAa,QAAQ,yBAAyB;AAG5E,SAASC,UAAU,QAAQ,gCAAgC;AAO3D,OAAO,MAAMC,QAA0B,GAAG,CACtC;EACIC,GAAG,EAAEJ,QAAQ,CAACI,GAAG;EACjBC,OAAO,EAAGC,OAAO,IAAK;IAClB,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAAiB;IACtC,IAAIA,IAAI,CAACC,KAAK,KAAK,uBAAuB,IAAID,IAAI,CAACE,QAAQ,KAAK,WAAW,EAAE;MACzE,OAAO;QACHC,IAAI,EAAER,UAAU,CAACS,OAAO;QACxBC,GAAG,EAAE,EAAE;QACPC,IAAI,EAAE,IAAIZ,aAAa,CAAC,WAAW;MACvC,CAAC;IACL;IACA,MAAM,IAAIa,KAAK,CAAC,cAAc,CAAC;EACnC;AACJ,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}