{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Thrown when DI cannot inject value into property decorated by @Inject decorator.\n */\nvar CannotInjectError = /** @class */function (_super) {\n  __extends(CannotInjectError, _super);\n  function CannotInjectError(target, propertyName) {\n    var _this = _super.call(this, \"Cannot inject value into \\\"\" + target.constructor.name + \".\" + propertyName + \"\\\". \" + \"Please make sure you setup reflect-metadata properly and you don't use interfaces without service tokens as injection value.\") || this;\n    _this.name = \"ServiceNotFoundError\";\n    Object.setPrototypeOf(_this, CannotInjectError.prototype);\n    return _this;\n  }\n  return CannotInjectError;\n}(Error);\nexports.CannotInjectError = CannotInjectError;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA;EAAuCA;EAGnC,2BAAYC,MAAc,EAAEC,YAAoB;IAAhD,YACIC,kBACI,gCAA6BF,MAAM,CAACG,WAAW,CAACC,IAAI,SAAIH,YAAY,SAAK,GACzE,8HAA8H,CACjI;IANLI,UAAI,GAAG,sBAAsB;IAOzBC,MAAM,CAACC,cAAc,CAACF,KAAI,EAAEG,iBAAiB,CAACC,SAAS,CAAC;;EAC5D;EAEJ,wBAAC;AAAD,CAXA,CAAuCC,KAAK;AAA/BC","names":["__extends","target","propertyName","_super","constructor","name","_this","Object","setPrototypeOf","CannotInjectError","prototype","Error","exports"],"sources":["C:\\reactjs\\bnk_fe_training\\base\\src\\error\\CannotInjectError.ts"],"sourcesContent":["/**\n * Thrown when DI cannot inject value into property decorated by @Inject decorator.\n */\nexport class CannotInjectError extends Error {\n    name = \"ServiceNotFoundError\";\n\n    constructor(target: Object, propertyName: string) {\n        super(\n            `Cannot inject value into \"${target.constructor.name}.${propertyName}\". ` +\n            `Please make sure you setup reflect-metadata properly and you don't use interfaces without service tokens as injection value.`\n        );\n        Object.setPrototypeOf(this, CannotInjectError.prototype);\n    }\n\n}"]},"metadata":{},"sourceType":"script","externalDependencies":[]}