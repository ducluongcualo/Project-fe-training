{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ContainerInstance_1 = require(\"./ContainerInstance\");\n/**\n * Service container.\n */\nvar Container = /** @class */function () {\n  function Container() {}\n  // -------------------------------------------------------------------------\n  // Public Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Gets a separate container instance for the given instance id.\n   */\n  Container.of = function (instanceId) {\n    if (instanceId === undefined) return this.globalInstance;\n    var container = this.instances.find(function (instance) {\n      return instance.id === instanceId;\n    });\n    if (!container) {\n      container = new ContainerInstance_1.ContainerInstance(instanceId);\n      this.instances.push(container);\n    }\n    return container;\n  };\n  /**\n   * Checks if the service with given name or type is registered service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  Container.has = function (identifier) {\n    return this.globalInstance.has(identifier);\n  };\n  /**\n   * Retrieves the service with given name or type from the service container.\n   * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n   */\n  Container.get = function (identifier) {\n    return this.globalInstance.get(identifier);\n  };\n  /**\n   * Gets all instances registered in the container of the given service identifier.\n   * Used when service defined with multiple: true flag.\n   */\n  Container.getMany = function (id) {\n    return this.globalInstance.getMany(id);\n  };\n  /**\n   * Sets a value for the given type or service name in the container.\n   */\n  Container.set = function (identifierOrServiceMetadata, value) {\n    this.globalInstance.set(identifierOrServiceMetadata, value);\n    return this;\n  };\n  /**\n   * Removes services with a given service identifiers (tokens or types).\n   */\n  Container.remove = function () {\n    var _a;\n    var ids = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      ids[_i] = arguments[_i];\n    }\n    (_a = this.globalInstance).remove.apply(_a, ids);\n    return this;\n  };\n  /**\n   * Completely resets the container by removing all previously registered services and handlers from it.\n   */\n  Container.reset = function (containerId) {\n    if (containerId) {\n      var instance = this.instances.find(function (instance) {\n        return instance.id === containerId;\n      });\n      if (instance) {\n        instance.reset();\n        this.instances.splice(this.instances.indexOf(instance), 1);\n      }\n    } else {\n      this.globalInstance.reset();\n      this.instances.forEach(function (instance) {\n        return instance.reset();\n      });\n    }\n    return this;\n  };\n  /**\n   * Registers a new handler.\n   */\n  Container.registerHandler = function (handler) {\n    this.handlers.push(handler);\n    return this;\n  };\n  /**\n   * Helper method that imports given services.\n   */\n  Container.import = function (services) {\n    return this;\n  };\n  // -------------------------------------------------------------------------\n  // Private Static Properties\n  // -------------------------------------------------------------------------\n  /**\n   * Global container instance.\n   */\n  Container.globalInstance = new ContainerInstance_1.ContainerInstance(undefined);\n  /**\n   * Other containers created using Container.of method.\n   */\n  Container.instances = [];\n  /**\n   * All registered handlers.\n   */\n  Container.handlers = [];\n  return Container;\n}();\nexports.Container = Container;","map":{"version":3,"mappings":";;;;;AAAA;AAOA;;;AAGA;EAAA,sBAiMA;EA5KI;EACA;EACA;EAEA;;;EAGOA,YAAE,GAAT,UAAUC,UAAe;IACrB,IAAIA,UAAU,KAAKC,SAAS,EACxB,OAAO,IAAI,CAACC,cAAc;IAE9B,IAAIC,SAAS,GAAG,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,kBAAQ;MAAI,eAAQ,CAACC,EAAE,KAAKN,UAAU;IAA1B,CAA0B,CAAC;IAC3E,IAAI,CAACG,SAAS,EAAE;MACZA,SAAS,GAAG,IAAII,qCAAiB,CAACP,UAAU,CAAC;MAC7C,IAAI,CAACI,SAAS,CAACI,IAAI,CAACL,SAAS,CAAC;;IAGlC,OAAOA,SAAS;EACpB,CAAC;EAoBD;;;;EAIOJ,aAAG,GAAV,UAAcU,UAA6B;IACvC,OAAO,IAAI,CAACP,cAAc,CAACQ,GAAG,CAACD,UAAiB,CAAC;EACrD,CAAC;EA0BD;;;;EAIOV,aAAG,GAAV,UAAcU,UAAgC;IAC1C,OAAO,IAAI,CAACP,cAAc,CAACS,GAAG,CAACF,UAAiB,CAAC;EACrD,CAAC;EAcD;;;;EAIOV,iBAAO,GAAd,UAAkBO,EAAmB;IACjC,OAAO,IAAI,CAACJ,cAAc,CAACU,OAAO,CAACN,EAAS,CAAC;EACjD,CAAC;EA2BD;;;EAGOP,aAAG,GAAV,UAAWc,2BAAsG,EAAEC,KAAW;IAC1H,IAAI,CAACZ,cAAc,CAACa,GAAG,CAACF,2BAAkC,EAAEC,KAAK,CAAC;IAClE,OAAO,IAAI;EACf,CAAC;EAED;;;EAGOf,gBAAM,GAAb;;IAAc;SAAA,UAA2B,EAA3BiB,qBAA2B,EAA3BA,IAA2B;MAA3BC;;IACV,UAAI,CAACf,cAAc,EAACgB,MAAM,WAAID,GAAG;IACjC,OAAO,IAAI;EACf,CAAC;EAED;;;EAGOlB,eAAK,GAAZ,UAAaoB,WAAiB;IAC1B,IAAIA,WAAW,EAAE;MACb,IAAMC,QAAQ,GAAG,IAAI,CAAChB,SAAS,CAACC,IAAI,CAAC,kBAAQ;QAAI,eAAQ,CAACC,EAAE,KAAKa,WAAW;MAA3B,CAA2B,CAAC;MAC7E,IAAIC,QAAQ,EAAE;QACVA,QAAQ,CAACC,KAAK,EAAE;QAChB,IAAI,CAACjB,SAAS,CAACkB,MAAM,CAAC,IAAI,CAAClB,SAAS,CAACmB,OAAO,CAACH,QAAQ,CAAC,EAAE,CAAC,CAAC;;KAGjE,MAAM;MACH,IAAI,CAAClB,cAAc,CAACmB,KAAK,EAAE;MAC3B,IAAI,CAACjB,SAAS,CAACoB,OAAO,CAAC,kBAAQ;QAAI,eAAQ,CAACH,KAAK,EAAE;MAAhB,CAAgB,CAAC;;IAExD,OAAO,IAAI;EACf,CAAC;EAED;;;EAGOtB,yBAAe,GAAtB,UAAuB0B,OAAgB;IACnC,IAAI,CAACC,QAAQ,CAAClB,IAAI,CAACiB,OAAO,CAAC;IAC3B,OAAO,IAAI;EACf,CAAC;EAED;;;EAGO1B,gBAAM,GAAb,UAAc4B,QAAoB;IAC9B,OAAO,IAAI;EACf,CAAC;EA7LD;EACA;EACA;EAEA;;;EAGwB5B,wBAAc,GAAsB,IAAIQ,qCAAiB,CAACN,SAAS,CAAC;EAE5F;;;EAGwBF,mBAAS,GAAwB,EAAE;EAE3D;;;EAGgBA,kBAAQ,GAAc,EAAE;EA8K5C,gBAAC;CAjMD,EAiMC;AAjMY6B","names":["Container","instanceId","undefined","globalInstance","container","instances","find","id","ContainerInstance_1","push","identifier","has","get","getMany","identifierOrServiceMetadata","value","set","_i","ids","remove","containerId","instance","reset","splice","indexOf","forEach","handler","handlers","services","exports"],"sources":["C:\\reactjs\\bnk_fe_training\\base\\src\\Container.ts"],"sourcesContent":["import {ContainerInstance} from \"./ContainerInstance\";\nimport {Token} from \"./Token\";\nimport {Handler} from \"./types/Handler\";\nimport {ObjectType} from \"./types/ObjectType\";\nimport {ServiceIdentifier} from \"./types/ServiceIdentifier\";\nimport {ServiceMetadata} from \"./types/ServiceMetadata\";\n\n/**\n * Service container.\n */\nexport class Container {\n\n    // -------------------------------------------------------------------------\n    // Private Static Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Global container instance.\n     */\n    private static readonly globalInstance: ContainerInstance = new ContainerInstance(undefined);\n\n    /**\n     * Other containers created using Container.of method.\n     */\n    private static readonly instances: ContainerInstance[] = [];\n\n    /**\n     * All registered handlers.\n     */\n    static readonly handlers: Handler[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets a separate container instance for the given instance id.\n     */\n    static of(instanceId: any): ContainerInstance {\n        if (instanceId === undefined)\n            return this.globalInstance;\n\n        let container = this.instances.find(instance => instance.id === instanceId);\n        if (!container) {\n            container = new ContainerInstance(instanceId);\n            this.instances.push(container);\n        }\n\n        return container;\n    }\n\n    /**\n     * Checks if the service with given name or type is registered service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static has<T>(type: ObjectType<T>): boolean;\n\n    /**\n     * Checks if the service with given name or type is registered service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static has<T>(id: string): boolean;\n\n    /**\n     * Checks if the service with given name or type is registered service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static has<T>(id: Token<T>): boolean;\n\n    /**\n     * Checks if the service with given name or type is registered service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static has<T>(identifier: ServiceIdentifier): boolean {\n        return this.globalInstance.has(identifier as any);\n    }\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(type: ObjectType<T>): T;\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(id: string): T;\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(id: Token<T>): T;\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(service: { service: T }): T;\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(identifier: ServiceIdentifier<T>): T {\n        return this.globalInstance.get(identifier as any);\n    }\n\n    /**\n     * Gets all instances registered in the container of the given service identifier.\n     * Used when service defined with multiple: true flag.\n     */\n    static getMany<T>(id: string): T[];\n\n    /**\n     * Gets all instances registered in the container of the given service identifier.\n     * Used when service defined with multiple: true flag.\n     */\n    static getMany<T>(id: Token<T>): T[];\n\n    /**\n     * Gets all instances registered in the container of the given service identifier.\n     * Used when service defined with multiple: true flag.\n     */\n    static getMany<T>(id: string|Token<T>): T[] {\n        return this.globalInstance.getMany(id as any);\n    }\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set<T, K extends keyof T>(service: ServiceMetadata<T, K>): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(type: Function, value: any): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(name: string, value: any): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(token: Token<any>, value: any): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set<T, K extends keyof T>(values: ServiceMetadata<T, K>[]): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(identifierOrServiceMetadata: ServiceIdentifier|ServiceMetadata<any, any>|(ServiceMetadata<any, any>[]), value?: any): Container {\n        this.globalInstance.set(identifierOrServiceMetadata as any, value);\n        return this;\n    }\n\n    /**\n     * Removes services with a given service identifiers (tokens or types).\n     */\n    static remove(...ids: ServiceIdentifier[]): Container {\n        this.globalInstance.remove(...ids);\n        return this;\n    }\n\n    /**\n     * Completely resets the container by removing all previously registered services and handlers from it.\n     */\n    static reset(containerId?: any): Container {\n        if (containerId) {\n            const instance = this.instances.find(instance => instance.id === containerId);\n            if (instance) {\n                instance.reset();\n                this.instances.splice(this.instances.indexOf(instance), 1);\n            }\n\n        } else {\n            this.globalInstance.reset();\n            this.instances.forEach(instance => instance.reset());\n        }\n        return this;\n    }\n\n    /**\n     * Registers a new handler.\n     */\n    static registerHandler(handler: Handler): Container {\n        this.handlers.push(handler);\n        return this;\n    }\n\n    /**\n     * Helper method that imports given services.\n     */\n    static import(services: Function[]): Container {\n        return this;\n    }\n\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}